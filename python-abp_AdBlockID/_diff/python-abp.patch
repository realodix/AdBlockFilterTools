diff --git a/python-abp/abp/filters/parser.py b/python-abp_AdBlockID/abp/filters/parser.py
index 00f5661..78a6c21 100644
--- a/python-abp/abp/filters/parser.py
+++ b/python-abp_AdBlockID/abp/filters/parser.py
@@ -168,7 +168,6 @@ def _line_type(name, field_names, format_string):
 
 Header = _line_type('Header', 'version', '[{.version}]')
 EmptyLine = _line_type('EmptyLine', '', '')
-Comment = _line_type('Comment', 'text', '! {.text}')
 Metadata = _line_type('Metadata', 'key value', '! {0.key}: {0.value}')
 Filter = _line_type('Filter', 'text selector action options', '{.text}')
 Include = _line_type('Include', 'target', '%include {0.target}%')
@@ -323,21 +322,26 @@ def parse_line(line, position='body'):
 
     stripped = line.strip()
 
-    if stripped == '':
-        return EmptyLine()
-
     if position == 'start':
         match = HEADER_REGEXP.search(line)
         if match:
             return Header(match.group(1))
 
-    if stripped.startswith('!'):
+    # if re.search('^\s*$'       # blank line
+    #              '|^!(\s?)\w'  # comment
+    #              '|^#(\s?)\w', # uBo comment
+    #              stripped):
+    if (stripped == ''                      # blank line
+       or stripped.startswith('!')          # comment
+       and not stripped.startswith('!#')
+       or stripped.startswith('#')          # uBo comment
+       and not stripped.startswith('##')):
         match = METADATA_REGEXP.match(line)
         if match:
             key, value = match.groups()
             if position != 'body' or key.lower() == 'checksum':
                 return Metadata(key, value)
-        return Comment(stripped[1:].lstrip())
+        return EmptyLine()
 
     if stripped.startswith('%include') and stripped.endswith('%'):
         return _parse_instruction(stripped)
diff --git a/python-abp/abp/filters/renderer.py b/python-abp_AdBlockID/abp/filters/renderer.py
index dd7fcf1..568ef84 100644
--- a/python-abp/abp/filters/renderer.py
+++ b/python-abp_AdBlockID/abp/filters/renderer.py
@@ -2,11 +2,12 @@
 
 from __future__ import unicode_literals
 
+import datetime, subprocess
 import itertools
 import logging
 import time
 
-from .parser import parse_filterlist, Comment, Metadata
+from .parser import parse_filterlist, Metadata
 from .sources import NotFound
 
 __all__ = ['IncludeError', 'MissingHeader', 'render_filterlist', 'render_diff']
@@ -72,12 +73,14 @@ def _process_includes(sources, default_source, parent_include_stack, lines):
                     sources, inherited_source, include_stack, included)
 
                 _logger.info('- including: %s', name)
-                yield Comment('*** {} ***'.format(name))
+
                 for line in all_included:
                     if line.type not in {'header', 'metadata'}:
                         yield line
             except (NotFound, ValueError) as exc:
                 raise IncludeError(exc, include_stack)
+        elif line.type == 'emptyline':
+            continue
         else:
             yield line
 
@@ -102,7 +105,28 @@ def _first_and_rest(iterable):
 def _insert_version(lines):
     """Insert metadata comment with version (a.k.a. date)."""
     first_line, rest = _first_and_rest(lines)
-    version = Metadata('Version', time.strftime('%Y%m%d%H%M', time.gmtime()))
+
+    # year.day_of_the_year.v_build
+    # v_build = (datetime.datetime.utcnow().hour*60)+datetime.datetime.utcnow().minute
+    # version = Metadata('Version', time.strftime('%y.%j.{}'.format(v_build), time.gmtime()))
+
+    # year.month.number_of_commits_in_month
+    numberOfCommitsInMonth = subprocess.Popen(
+        [
+            'git', 'rev-list', 'HEAD', '--count', '--after="{} days"' '"+%Y-%m-%dT23:59"'
+            .format(datetime.datetime.now().day)
+        ],
+        stdout=subprocess.PIPE,
+        universal_newlines=True
+    )
+
+    version = Metadata(
+        'Version',
+        time.strftime('%y.X%m.{}'.format(numberOfCommitsInMonth.stdout.read().strip()),
+        time.gmtime()).replace('X0','X').replace('X','')
+        # https://stackoverflow.com/a/5900593
+    )
+
     return itertools.chain([first_line, version], rest)
 
 
@@ -119,6 +143,17 @@ def _remove_checksum(lines):
             yield line
 
 
+def _compiler_info(lines):
+    pa_abid = 'python-abp (AdBlockID version)'
+
+    for line in lines:
+        if line.type != 'emptyline':
+            pa_abid
+        yield line
+
+    yield Metadata('Compiler', pa_abid)
+
+
 def _validate(lines):
     """Validate the final list."""
     first_line, rest = _first_and_rest(lines)
@@ -158,7 +193,7 @@ def render_filterlist(name, sources, top_source=None):
     _logger.info('Rendering: %s', name)
     lines, default_source = _get_and_parse_fragment(name, sources, top_source)
     lines = _process_includes(sources, default_source, [name], lines)
-    for proc in [_process_timestamps, _insert_version, _remove_checksum,
+    for proc in [_process_timestamps, _compiler_info, _insert_version, _remove_checksum,
                  _validate]:
         lines = proc(lines)
     return lines
